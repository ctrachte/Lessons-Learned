Define and compare recursion and iteration.

- Recursion is calling a function within itself to repeat a process until a base-case is reached
- Recursion is often used when the alorithm can be defined as a combination of sub-results
- Iteration utilizes a fixed loop instead with a stopping condition such as a `for` or `while` loop
- Iteration is used for almost every other algorithm case because it is generally faster

Name five algorithms that are commonly implemented by recursion.
- Searching a binary tree for a value
- Calculating a factorial
- Brute force guessing algorithms
- Dijkstra's Algorithm
- Fibonacci sequence

When should you use recursion, and when should you avoid recursion? Give examples for each:

Recursion is often used when the alorithm can be defined as a combination of sub-results
A simple data set that you would need to repetitively calculate a number,  such as a factorial,
would be a good example, because recursive code is generally quicker and more elegant.

However, Recursive algorithms are very time-complex and can quickly cause stack overflow,
so most programmers limit recursion to cases where input numbers remain small.

Compare the recursive and iterative solutions to the three algorithms from the checkpoint (Factorial, Maximum, and Fibonacci). What is similar, and what is different?

Fibonacci
- similar
  both have base cases, to check if the number is too small
  both repeatedly add
- different
   iterative uses variables to track current and previous and evaulate each case one by one
   recursive uses fewer lines of code, but might be more time complex

Maximum
- similar
   both have a current largest to check against the number input
   both have a conditional to check with
- different
   iterative has a lot less code than recursive
   recursive must use a base case in this algorithm, iterative doesnt
   recursive much more time-complex

Factorial
- similar
  both have base cases, to check if the number is too small
  both repeatedly multiply
- different
   iterative uses a for loop and a variable to track current position
   recursive uses fewer lines of code, but might be more time complex

Given a multi-dimensional collection (such as an array) where the number of dimensions is unknown, write a recursive algorithm to count the number of items in the entire collection.

// My Algorithm
// 1.) first we set a variable to hold the sum
// 2.) then we loop through the array
// - if the type of the object at the index is a number, add one to the sum
// - else we call the function again on the object at the index
// 3.) return the sum

function arrayLength(array) {
  var sum = 0;
  for (var i = 0; i < array.length; i++) {
    if (typeof array[i] === "number") {
      sum += 1;
    } else {
      sum += arrayLength(array[i]);
    }
  }
  return sum;
}
console.log(arrayLength([[1, 2, 3, 4], [3, 4, 5, 6], [5, 1, 3, 5, 6, 7]]));

A palindrome is a word or phrase whose spelling is the same either direction (e.g., racecar). Write a recursive algorithm to determine if a given word or phrase is a palindrome.

// My algorithm
// 1.) first we set the length to the string length
// 2.) then we check if the string length is 0 or 1, this is our stopping condition
// - return true
// 3.) else we check if the letters at opposite ends are equal
// - if they are, we slice the index inwards from both ends and execute again
// - else return false

var isPalindrome = function(string) {
  var stringLength = string.length;

  if (stringLength === 0 || stringLength === 1) {
    // base case, when string is less than 2
    return "This word is a plalindrome!";
  }

  if (string[0] === string[stringLength - 1]) {
    // check letters in opposite indices
    return isPalindrome(string.slice(1, stringLength - 1)); // if they are equal, go next
  }
  // else return false
  return "This word isn't a plalindrome!";
};

console.log(isPalindrome("racecar"));


Laura and Xander are going door-to-door around their block looking for their lost cat. Write a recursive algorithm showing one way they can visit every house on their block exactly once.

// My algorithm
// 1.) set laura to the last address in the array
// 2.) set Xander to the first address in the array
// 4.) log their positions
// 3.) if the array length is 2 or 1, log 'they have visited all houses' (base case)
// - else recursively call function on array.slice(first index + 1, last index - 1)

function visitHouses(array) {
  var laura = array[array.length - 1];
  var xander = array[0];

  console.log("Xander is visiting address: " + xander);
  console.log("Laura is visiting address: " + laura);

  if (array.length === 2 || array.length === 1) {
    return "Xander and Laura meet in the middle of the block and have visited all houses.";
  } else {
    return visitHouses(array.slice(1, array.length - 1));
  }
}

const houses = [
  "552 North Street",
  "551 North Street",
  "550 North Street",
  "549 North Street",
  "548 North Street",
  "547 North Street"
];

console.log(visitHouses(houses));
