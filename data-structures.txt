A line of people at an amusement park ride.

The line is composed of members, represented as strings.
There is a front to the line, as well as a back.
When someone enters the line, place them at the end.
People may leave the line whenever they see fit, and those behind them take their place.
Given the above real-world information, use an array data structure to code the following solution.

a) Use an array input: ["Vivian", "Ava", "Josh", "Patrick", "Mike"]

// in JavaScript

var line = ["Vivian", "Ava", "Josh", "Patrick", "Mike"];

b) Insert a new person, "Mary" at the end of the line. In other words, you should insert Mary after Mike.

line.append('Mary');

c) Find a person in line named "Josh." This function should return the position of 2 in the array, (recall that arrays are 0-based).

var josh = line['Josh'];

d) Find a person in line named "Emily." What should your function return if it does not find the item in the array?

var emily = (line['Emily']) ? line['Emily'] : "Emily is not in this line!";

// will return Emily's place in line if she's there, or "Emily is not in this line!" if she's not.

e) What if Ava wants to allow a friend, "Melissa", to cut in line in front of her? How would you code this so Melissa appears before Ava?

// we can mutate the array with JavaScript's `splice` method.

line.splice(line['Ava'], 0, 'Melissa');

f) If Patrick wants to leave the line, how would you delete him from the array?

// we can mutate the array with JavaScript's `splice` method.

line.splice(line['Patrick'], 1);


Provide another real-world example that you can model using a data structure.

- Orders at a restaurant. As orders are placed, they are appended to the end of the array:

var orders = [{name:carl, ticketId:132456, foodItem:combo1, orderTime:13:00},{etc.},{etc.}];

How would your data structure allow developers to access and manipulate the data?

using Javascript you could access each key:value pair pretty easily.

console.log(orders[0].name); // would print carl
orders[0].foodItem; // would print the food item

// this could be expanded to have nested objects within foodItems to contain more details of the order.