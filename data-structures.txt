A line of people at an amusement park ride.

The line is composed of members, represented as strings.
There is a front to the line, as well as a back.
When someone enters the line, place them at the end.
People may leave the line whenever they see fit, and those behind them take their place.
Given the above real-world information, use an array data structure to code the following solution.

a) Use an array input: ["Vivian", "Ava", "Josh", "Patrick", "Mike"]

// in JavaScript

class Line {
  constructor(names) {
    this.members = names;
  }
 
 findMember (name) {
  var member = (members.includes(name)) ?  name + ' is in ' + members.indexOf(name) + " place in line."
   : name + " is not in this line!";
  return member;
 }
 
 enterLine (person) {
  members.push(person);
  console.log(members);
 }
 
 leaveLine (person) {
  members.splice(members.indexOf(person),1);
  console.log(members);
 }

 cut (personCutting, personToCut) {
  members.splice(members.indexOf(personToCut), 0, personCutting);
  console.log(members);
 }
}

var members = ["Vivian", "Ava", "Josh", "Patrick", "Mike"]

var coolKids = new Line(members);

b) Insert a new person, "Mary" at the end of the line. In other words, you should insert Mary after Mike.

coolKids.enterLine('Mary');

c) Find a person in line named "Josh." This function should return the position of 2 in the array, (recall that arrays are 0-based).

coolKids.findMember('Josh');

d) Find a person in line named "Emily." What should your function return if it does not find the item in the array?

coolKids.findMember('Emily');

// will return Emily's place in line if she's there, or "Emily is not in this line!" if she's not.

e) What if Ava wants to allow a friend, "Melissa", to cut in line in front of her? How would you code this so Melissa appears before Ava?

coolKids.cut('Melissa','Ava');

f) If Patrick wants to leave the line, how would you delete him from the array?

coolKids.leaveLine('Patrick');

Provide another real-world example that you can model using a data structure.

- Orders at a restaurant. As orders are placed, they are appended to the end of the array:

var orders = [{name:carl, ticketId:132456, foodItem:combo1, orderTime:13:00},{etc.},{etc.}];

How would your data structure allow developers to access and manipulate the data?

using Javascript you could access each key:value pair pretty easily.

console.log(orders[0].name); // would print carl
orders[0].foodItem; // would print the food item

// this could be expanded to have nested objects within foodItems to contain more details of the order.
