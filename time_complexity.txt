What is time complexity and what is its relation to algorithms?
- A calculation of the time it takes for a function to execute given a number of inputs.

What is runtime?
- synonymous with time complexity, the time it takes for a program/function to execute.

How is the runtime of an algorithm calculated?
- recording time complexity of each instruction that must execute, then simplifying the sum of those down to the most time-intensive operation (eg. loops, recursive calls etc).

Name the six types of algorithm growth rates we saw in this checkpoint and list them in order of most efficient to least efficient. Now Google another algorithmic growth rate not covered and place it in the correct spot in your list.
- Constant O(1)
- Logarithmic O(log n)
- Linear O(n)
- Logarithmic Linear O(n log n)
- Quadratic O(n^2)
- Exponential O(2^n)
- Factorial O(n!)


Choose one of the algorithmic growth rates from the last question and make a comparison to a real-life situation.

- Factorial complexity:
In the traveling salesman problem, If there are n cities, and we brute force try each and every combination of these n cities to find which one is cheapest. 

Determine the time complexity of the following snippet of code. It is commonly known as a linear search.

- My first guess: Linear

FUNCTION linearSearch(array, target)
 FOR each number in the array
   IF number = target THEN
     RETURN true
   END IF
 END FOR
 RETURN false
END FUNCTION

Determine the time complexity of the following snippet of code.

- My first Guess: Quadratic

If you get stuck, read through the graphical representation section again.

FUNCTION foo(array)
 FOR each number in the array
   FOR each number in the array
     print "Hello"
   END FOR
 END FOR
END FUNCTION

Determine the time complexity of the following snippet of code. It is commonly known as the Fibonacci sequence.

My first guess: Exponential

FUNCTION fibonacci(number)
 IF number < 1 THEN
   ERROR
 ELSE IF number = 1 or 2 THEN
   RETURN 1
 ELSE
   CALL fibonacci WITH number - 2 RETURNING twoBack
   CALL fibonacci WITH number - 1 RETURNING oneBack
   RETURN twoBack + oneBack
 END IF
END FUNCTION

Out of the code snippets you just saw, which is the most time efficient?

Linear, the runtime is directly proportional to the number of inputs.